<% c++ #include "webserver/content.h" %>
<% skin view %>
<% view status uses content::content_status extends master %>


<% template css() %>
<style type="text/css">
div.connection_ok{ background-color: green; }
div.connection_warning{ background-color: yellow; }
div.connection_error{ background-color: red; }
</style>
<% end template %>




<% template javascript() %>
<script type="text/javascript">

<!-- Start of status -->

//
// To be incorporated into the executable file.
//
// Test file for the status view
var status1 = null;


function timestamp_to_string()
{
   var ts = new Date();
   ts.setMilliseconds(0);
   var sz = ts.toISOString().replace("T", " ").replace("Z", "").replace(".000", "");
   return sz
}


// Constructor
var Status = function()
{
	this.timer1 = setTimeout(on_status_timer, 1000);
	this.cache_count = 1; // Used for fooling IE cache.
	this.line_count = 1;
	this.erase_count = 0;
}


Status.prototype.do_add_lines = function( text )
{
	var something_was_added = 0;
	var testdiv_outer = jQuery("#testdiv_outer");
	var testdiv = jQuery("#testdiv_outer > .testdiv_inner");
	var at_bottom = 0;
	var myoffset1 = Math.abs( (testdiv.offset().top - (testdiv_outer.offset().top ) ) );
	var myoffset = myoffset / 20;
	var myheight1 = testdiv.outerHeight() - testdiv_outer.height();
	var myheight = myheight1 / 20;
	if ( myoffset1 + 5 >= myheight1 )
	{
		// We're at the bottom!
		at_bottom = 1;
	}

	var lines = text.split( "\n" );
	for ( var index in lines )
	{
		var line = lines[index];
		var mydiv = '<div id="a' + this.line_count + '" ';

		// The GH memory log may contain \1 group
		while ( line.length > 0 && line[0] < ' ' )
		{
			if ( line.charCodeAt(0) == 1 )
			{
				line = line.substring(1, line.length-1);
				var group = parseInt( line );
				var sp_index = line.indexOf( ' ' );
				line = line.substring( sp_index+1, line.length-sp_index-1);
				if ( group == 1 )
				{
					mydiv += ' class="note"';
				}
			}
			else
			{
				// We just remove the first char.
				line = line.substring(1, line.length-1);
			}
		}
		if ( line.length > 0 )
		{
			something_was_added = 1;
			if ( line.search("error") > -1 )
			{
				mydiv += ' class="error"';
			}
			else if ( line.search("warning") > -1 )
			{
				mydiv += ' class="warning"';
			}
			mydiv += ' >';
			testdiv.append( mydiv + line + '</div>');
			this.line_count++;
		}
	}
	if ( at_bottom == 1 )
	{
		if (this.line_count > 30)
		{
			for( ; this.line_count - this.erase_count > 100; this.erase_count++)
			{
				// Dont use this one. It takes a long time. jQuery('div').remove('#a' + erase_count);
				jQuery('div.#a' + this.erase_count ).remove();
			}			
		}
		testdiv_outer.animate({scrollTop: testdiv.outerHeight()});
	}	
	return something_was_added;
}



Status.prototype.do_get_log = function( )
{
	var myurl = '/json/logger/update/dummy=' +  this.cache_count++;
	var that = this;
	jQuery.ajax({ url: myurl, success: function(data) { status1.do_add_lines( data ); } });
}


Status.prototype.connection_string = function(active, condition, _value )
{
	var result = "";
	var value = "&nbsp;";
	if ( _value )
	{
		value = _value;
	}
	if ( active )
	{
		if ( condition )
		{
			result = "<td><div class='connection_ok'>"+ value +"</div></td>";
		}
		else if ( condition === undefined )
		{
			result = "<td><div>"+ value +"</div></td>";
		}
		else
		{
			result = "<td><div class='connection_error'>"+ value +"</div></td>";
		}
	}
	else
	{
		result = "<td><div>"+ value +"</div></td>";
	}
	return result;
}


Status.prototype.reload = function( timeout )
{
	clearTimeout( this.timer1 );
	this.timer1 = setTimeout(on_status_timer, timeout);
}


Status.prototype.show_flow = function( input )
{
	if ( input )
	{
		var rate = parseInt(input * 8 / 60);
		return (rate >= 1024) ? (parseInt(rate / 1024) + 'K') : rate;
	}
	return "&nbsp;";
}


Status.prototype.on_status_update1 = function( data )
{
	console.log("status type: " + typeof data );
	var sz_html = "";
	var json_data = null;
	if (typeof data === 'object')
		json_data = data;
	else if (typeof data === 'string')
		json_data = JSON.parse(data);
	else
		return;

	var that = this;
	var idata = 0;

	// ---- THE CLIENT PART ----
	sz_html = ""; 
	if ( json_data.clients )
	{
		sz_html = "<h3>Clients</h3><table border='1'><tr><th>Port</th><th>Name</th><th>Hostname</th><th>Data in [bit/s]</th><th>Data out [bit/s]</th><th>Certificate</th><th>Active</th><th>Status</th></tr>";
		$.each(json_data.clients, function(idata,client_data) 
		{
			var localhosts = ' ';
			if ( client_data.local_hostname )
			{
				var separator = ' ';
				var index;
				for ( index = 0; index < client_data.local_hostname.length; index++ )
				{
					localhosts = localhosts + separator + client_data.local_hostname[index];
					separator = ',';
				}
			}

			// The table row for the local description
			var linest = "<tr>";
			linest += that.connection_string( true, client_data.connected_local, client_data.port );
			linest += "<td></td>";
			linest += "<td>"
         if (client_data.users)
         {
            linest += client_data.users + " connection";
         }
         linest += "</td>";
			linest += "<td></td>";
			linest += "<td></td>";
			linest += "<td></td>";

			linest += "<td><input type=\"checkbox\"";
			if (client_data.active)
			{
				linest += " checked=\"yes\" ";
			}
			linest += " onclick=\"status1.on_client_active(this," + client_data.id + ", '" + "')\" /></td>";

			linest += "<td>" + (( client_data.log ) ? client_data.log : "&nbsp;" ) + "</td>";
			linest += "</tr>";

			var client_connected = false;
			$.each(client_data, function(idata,remote_data) 
			{
				if (remote_data.connected_remote)
				{
					client_connected = true;
				}
			});

			$.each(client_data.remotes, function(idata,remote_data) 
			{
				// The table row for each of the remote connections
				linest += "<tr><td></td><td>" + remote_data.name + "</td>";
				linest += that.connection_string( (!client_connected) || remote_data.connected_remote, remote_data.connected_remote, remote_data.hostname + ":" + remote_data.port );
				linest += "<td>" + that.show_flow( remote_data.count_in ) + "</td>";			// Bytes in
				linest += "<td>" + that.show_flow( remote_data.count_out ) + "</td>";			// Bytes out
				linest += "<td>";
				if ( remote_data.activate )
				{
					linest += remote_data.activate;
				}
				else if ( remote_data.name && client_data.id )
				{
					if ( remote_data.cert )
					{
						linest += "<input type=\"button\" value=\"Delete\" onclick=\"status1.on_client_delete('" + remote_data.name + "')\" />";
					}
					else
					{
						linest += "<input type=\"button\" value=\"Activate\" onclick=\"status1.on_client_activate(" + client_data.id + ", '" + remote_data.name + "')\" />";
					}
				}
				linest += "</td>";
				linest += "<td>";
            linest += "</td>";
				if (remote_data.connected_remote)
				{
					linest += "<td>" + localhosts + "</td>";
				}
				else
				{
					linest += "<td></td>";
				}
				linest += "</tr>";
			});

			sz_html += linest;
		} );

	}
	console.log(sz_html);
	$("#clients").html( sz_html );

	// ---- THE HOST PART ----
	sz_html = "";
	if ( json_data.hosts )
	{
		sz_html = "<h3>Hosts</h3><table border='1'><tr><th>Port</th><th>Name</th><th>Remote</th><th>Local</th><th>Data in [bit/s]</th><th>Data out [bit/s]</th><th>Certificate</th><th>Active</th><th>Status</th></tr>";
		json_data.hosts.forEach( function(host_data)
		{
			var linest = "<tr><td>" + host_data.port + "</td>";

			linest += "<td></td><td></td><td></td><td></td><td></td><td></td>";
			linest += "<td><input type=\"checkbox\" disabled=\"disabled\" ";
			if (host_data.active)
			{
				linest += " checked=\"yes\" ";
			}
			linest += " onclick=\"status1.on_host_active(this," + host_data.id + ", '" + "')\" /></td>";

			linest += "</tr>";
			host_data.remotes.forEach( function(remote_data) 
			{
				var local_host = remote_data.local_hostname;
				if (remote_data.local_port)
				{
					local_host = local_host + ":" + remote_data.local_port;
				}
				linest += "<tr><td></td><td>" + remote_data.name + "</td>";
				linest += that.connection_string( host_data.active, remote_data.connected_remote, remote_data.remote_hostname );
				linest += that.connection_string( host_data.active, remote_data.connected_local, local_host );
				linest += "<td>" + that.show_flow( remote_data.count_in ) + "</td>";
				linest += "<td>" + that.show_flow( remote_data.count_out ) + "</td>";
				linest += "<td>";
				if ( remote_data.activate )
				{
					linest += remote_data.activate;
				}
				else if ( remote_data.name )
				{
					if ( remote_data.cert )
					{
						linest += "<input type=\"button\" value=\"Delete\" onclick=\"status1.on_client_delete('" + remote_data.name + "')\" />";
					}
					else
					{
						linest += "<input type=\"button\" value=\"Activate\" onclick=\"status1.on_host_activate('" + remote_data.name + "')\" />";
					}
				}
				linest += "</td>";
				linest += "<td>" + ( ( remote_data.log ) ? remote_data.log : "&nbsp;" ) + "</td>";
				linest += "</tr>";
			} );
			sz_html += linest;
		} );
	}
	sz_html += "</table>";
	$("#version").html( (json_data.version) ? (json_data.version) : "&nbsp;" );
	$("#hosts").html( sz_html );

	$("#own_name").html( (json_data.global.name) ? (json_data.global.name) : "&nbsp;" );
}


Status.prototype.do_get_update = function( )
{
	// Make sure we keep running, even if there are problems.
	this.reload(1000);
	try
	{
		var that = this;
		jQuery.ajax(
		{
			url: '/json/status/dummy=' + this.cache_count++,
			success: function(data)
			{
				
				$("#status").html("Running " + timestamp_to_string() + " UTC" );
				$("#status").removeClass();
				that.on_status_update1( data );
				that.do_get_log();
			},
			error: function()
			{
				$("#status").html("No connection to proxy " + timestamp_to_string() + " UTC" );
				$("#status").removeClass().addClass('connection_error');
				$("#clients").html("");
				$("#hosts").html("");
			}
		});
	}
	catch(err)
	{
		console.log("Exception: " + err );
	}
}


Status.prototype.on_client_activate = function( id, name )
{
	console.log( "on_client_activate: " + name );
	if (confirm("Activate certificate for '" + name + "'? Please note the host at the other end must be activated first" ))
	{
		jQuery.ajax({ url: '/json/command/client/activate/name=' + name + '&id=' + id + '&dummy=' + this.cache_count++ });
		this.reload(200);
	}
}


Status.prototype.on_client_active = function( cb, id, name )
{
	console.log( "on_client_active: " + name );
	if (confirm("(De)activate for '" + name + "'? Please note this is NOT persistent, so it will be reset after next restart"))
	{
		jQuery.ajax({ url: '/json/command/client/active/name=' + name + '&id=' + id + '&check=' + cb.checked + '&dummy=' + this.cache_count++ });
		this.reload(200);
	}
}


///

Status.prototype.on_client_delete = function( name )
{
	console.log( "on_client_delete: " + name );
	if (confirm("Delete certificate for '" + name + "'?"))
	{
		jQuery.ajax({ url: '/json/command/client/delete/name=' + name + '&dummy=' + this.cache_count++ });
		this.reload(200);
	}
}


Status.prototype.on_host_activate = function( name )
{
	console.log( "on_host_activate: " + name );
	if (confirm("Activate certificate for '" + name + "'? Please note this end must be activated first"))
	{
		jQuery.ajax({ url: '/json/command/host/activate/name=' + name + '&dummy=' + this.cache_count++ });
	}
	this.reload(100);
}


Status.prototype.on_host_active = function( cb, id, name )
{
	console.log( "on_host_active: " + name );
	if (confirm("(De)activate for '" + name + "'? Please note this is NOT persistent, so it will be reset after next restart"))
	{
		jQuery.ajax({ url: '/json/command/host/active/name=' + name + '&id=' + id + '&check=' + cb.checked + '&dummy=' + this.cache_count++ });
		this.reload(200);
	}
}


Status.prototype.on_host_delete = function( name )
{
	console.log( "on_host_delete: " + name );
	if (confirm("Delete certificate for '" + name + "'?"))
	{
		jQuery.ajax({ url: '/json/command/host/delete/name=' + name + '&dummy=' + this.cache_count++ });
	}
	this.reload(100);
}


Status.prototype.on_stop = function( )
{
	if (confirm("Are you sure you want to stop the proxy application service?"))
	{
		jQuery.ajax({ url: '/json/command/stop/dummy=' + this.cache_count++ });
	}
}


Status.prototype.on_filelog_active = function( cb )
{
	console.log( "on_filelog_active: " + cb);
   
   jQuery.ajax({ url: '/json/command/logfile/active=' + cb.checked });
}


Status.prototype.on_configure = function( )
{
	console.log( "on_configure: " + name );
	if (confirm("Are you sure you want to reload the configuration for the proxy application service?"))
	{
		jQuery.ajax({ url: '/json/command/config/reload/dummy=' + this.cache_count++ });
	}
	this.reload(100);
}


Status.prototype.on_toggle_log = function( )
{
   console.log( "on_toggle_log" );
   var testdiv_outer = jQuery("#testdiv_outer");
   if ( testdiv_outer.height() > 100 )
   {
      $('#div_logfile').css('visibility', 'hidden');
      testdiv_outer.height(0);
   }
   else
   {
      $('#div_logfile').css('visibility', 'visible');
      testdiv_outer.height(200);
   }
}


// Generic functions below.

function on_status_timer()
{
	status1.do_get_update();
}


$(document).ready(function()
{
   status1 = new Status();
	
   $('#div_logfile').css('visibility', 'hidden');
   console.log("Ready");
   $.ajaxSetup({ cache: false });
   console.dir(status1);
});





<!-- End of status -->

<!-- Start of logger -->

<!-- End of logger -->

</script>
<% end template %>


<% template mainview() %>
<table>
<tr><td><h2>UniProxy(</h2></td><td><h2> <div id="own_name"></div> </h2></td><td><h2>)</h2></td></tr>
</table>
<div id="clients" data-role="collapsible" data-collapsed="false" ></div>
<div id="providers"></div>
<div id="hosts"></div>
<p></p>
<table>
<tr><td>Version:<td><div id="version"></div></td><td>Status:</td><td><div id="status">status</div></td></tr>
</table>

<p></p>

<table>
<tr>
<td><form action="/json/command/config/upload/" method="post" enctype="multipart/form-data" accept-charset="utf-8"><input type="file" name="upload.json" accept="application/json" ></input>
	<input type="submit" value="Upload configuration"  />
	<input type="button" value="Toggle log" onclick="status1.on_toggle_log()" /> 
	<input type="button" value="Stop/Restart" onclick="status1.on_stop()" />
	<input type="button" value="Reload configuration" onclick="status1.on_configure()" />
</form>
</td>
</tr>
</table>

<p></p>
<input id="div_logfile" type="checkbox" checked="no" onclick="status1.on_filelog_active(this)" />
<div class="testdiv" id="testdiv_outer" style="height:0px;overflow:auto;border: 1px black solid">
	<div class="testdiv_inner" id="testdiv_inner"></div>
</div>


<% end template %>

<% end view %>
<% end skin %>
